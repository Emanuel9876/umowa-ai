import streamlit as st
import re
from PyPDF2 import PdfReader
from reportlab.pdfgen import canvas
import io
import sqlite3
import json
import hashlib
import os
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib
matplotlib.use('Agg')

st.set_page_config(page_title="Umowa AI", layout="wide")

# Baza danych SQLite
conn = sqlite3.connect("umowa_ai.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS analiza (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user TEXT,
    tekst TEXT,
    podsumowanie TEXT,
    score INTEGER,
    timestamp TEXT
)''')
conn.commit()

# U콮ytkownicy
def load_users():
    if os.path.exists("users.json"):
        with open("users.json", "r") as f:
            return json.load(f)
    return {}

def save_users(users):
    with open("users.json", "w") as f:
        json.dump(users, f)

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

users = load_users()
session_state = st.session_state

if "logged_in" not in session_state:
    session_state.logged_in = False
    session_state.username = ""

if "language" not in session_state:
    session_state.language = "PL"

translations = {
    "Strona G켹칩wna": {"PL": "Strona G켹칩wna", "EN": "Home", "DE": "Startseite"},
    "Analiza Umowy": {"PL": "Analiza Umowy", "EN": "Contract Analysis", "DE": "Vertragsanalyse"},
    "Ryzyka": {"PL": "Ryzyka", "EN": "Risks", "DE": "Risiken"},
    "Moje Analizy": {"PL": "Moje Analizy", "EN": "My Analyses", "DE": "Meine Analysen"},
    "Logowanie / Rejestracja": {"PL": "Logowanie / Rejestracja", "EN": "Login / Register", "DE": "Anmeldung / Registrierung"},
    "Zaloguj si캧": {"PL": "Zaloguj si캧", "EN": "Login", "DE": "Einloggen"},
    "Zarejestruj si캧": {"PL": "Zarejestruj si캧", "EN": "Register", "DE": "Registrieren"},
    "Login": {"PL": "Login", "EN": "Username", "DE": "Benutzername"},
    "Has켹o": {"PL": "Has켹o", "EN": "Password", "DE": "Passwort"},
    "Rozpocznij analiz캧 teraz": {"PL": "Rozpocznij analiz캧 teraz", "EN": "Start analysis now", "DE": "Analyse jetzt starten"},
    "Analiza zapisana.": {"PL": "Analiza zapisana.", "EN": "Analysis saved.", "DE": "Analyse gespeichert."},
    "Brak analiz do pokazania wykresu.": {"PL": "Brak analiz do pokazania wykresu.", "EN": "No analyses to display chart.", "DE": "Keine Analysen zum Anzeigen des Diagramms."},
    "Brak zapisanych analiz.": {"PL": "Brak zapisanych analiz.", "EN": "No saved analyses.", "DE": "Keine gespeicherten Analysen."},
    "Usu켻 analiz캧": {"PL": "Usu켻 analiz캧", "EN": "Delete analysis", "DE": "Analyse l칬schen"},
    "Analiza z dnia": {"PL": "Analiza z dnia", "EN": "Analysis from", "DE": "Analyse vom"},
    "Ryzyko": {"PL": "Ryzyko", "EN": "Risk", "DE": "Risiko"},
    "Wprowad콬 lub za켹aduj tekst umowy.": {"PL": "Wprowad콬 lub za켹aduj tekst umowy.", "EN": "Enter or upload contract text.", "DE": "Vertragstext eingeben oder hochladen."},
    "Tw칩j osobisty asystent do analizy um칩w i wykrywania ryzyk": {
        "PL": "Tw칩j osobisty asystent do analizy um칩w i wykrywania ryzyk",
        "EN": "Your personal assistant for contract analysis and risk detection",
        "DE": "Ihr pers칬nlicher Assistent zur Vertragsanalyse und Risikobewertung"
    },
    "Co potrafi aplikacja:": {
        "PL": "Co potrafi aplikacja:",
        "EN": "What the app can do:",
        "DE": "Was die App kann:"
    },
    "Analiza tekstu umowy lub pliku PDF": {
        "PL": "Analiza tekstu umowy lub pliku PDF",
        "EN": "Analyze contract text or PDF file",
        "DE": "Analyse des Vertragstextes oder PDF-Datei"
    },
    "Ocena ryzyka w umowie": {
        "PL": "Ocena ryzyka w umowie",
        "EN": "Risk evaluation in the contract",
        "DE": "Risikobewertung im Vertrag"
    },
    "Podsumowanie kluczowych punkt칩w": {
        "PL": "Podsumowanie kluczowych punkt칩w",
        "EN": "Summary of key points",
        "DE": "Zusammenfassung der wichtigsten Punkte"
    },
    "Zarz캔dzanie histori캔 analiz": {
        "PL": "Zarz캔dzanie histori캔 analiz",
        "EN": "Manage analysis history",
        "DE": "Analyseverlauf verwalten"
    },
    "T켹umaczenie interfejsu na 3 j캧zyki": {
        "PL": "T켹umaczenie interfejsu na 3 j캧zyki",
        "EN": "Interface translation in 3 languages",
        "DE": "Oberfl칛che in 3 Sprachen 칲bersetzen"
    },
    "Gotowy?": {
        "PL": "Gotowy?",
        "EN": "Ready?",
        "DE": "Bereit?"
    },
    "Metoda:": {"PL": "Metoda:", "EN": "Method:", "DE": "Methode:"},
    "Prze콑lij plik PDF": {"PL": "Prze콑lij plik PDF", "EN": "Upload PDF file", "DE": "PDF-Datei hochladen"},
    "Tekst umowy:": {"PL": "Tekst umowy:", "EN": "Contract text:", "DE": "Vertragstext:"},
    "Podsumowanie:": {"PL": "Podsumowanie:", "EN": "Summary:", "DE": "Zusammenfassung:"},
    "Zapisz analiz캧": {"PL": "Zapisz analiz캧", "EN": "Save analysis", "DE": "Analyse speichern"},
    "Wybierz j캧zyk / Select Language / Sprache w칛hlen": {
        "PL": "Wybierz j캧zyk", "EN": "Select Language", "DE": "Sprache w칛hlen"
    },
    "Wybierz opcj캧": {"PL": "Wybierz opcj캧", "EN": "Choose option", "DE": "Option w칛hlen"},
    "Wklej tre콑캖 umowy tutaj": {"PL": "Wklej tre콑캖 umowy tutaj", "EN": "Paste contract text here", "DE": "Vertragstext hier einf칲gen"},
    "Analizuj umow캧": {"PL": "Analizuj umow캧", "EN": "Analyze contract", "DE": "Vertrag analysieren"},
    "Podsumowanie analizy": {"PL": "Podsumowanie analizy", "EN": "Analysis summary", "DE": "Analysezusammenfassung"},
    "Wykryte ryzyka": {"PL": "Wykryte ryzyka", "EN": "Detected risks", "DE": "Erkannte Risiken"},
    "Poziom czu켹o콑ci wykrywania": {"PL": "Poziom czu켹o콑ci wykrywania", "EN": "Detection sensitivity level", "DE": "Erkennungsempfindlichkeit"},
    "Dodaj w켹asne s켹owa kluczowe (oddziel przecinkami)": {
        "PL": "Dodaj w켹asne s켹owa kluczowe (oddziel przecinkami)",
        "EN": "Add custom keywords (comma separated)",
        "DE": "Benutzerdefinierte Schl칲sselw칬rter hinzuf칲gen (Komma getrennt)"
    },
    "Eksportuj raport PDF": {"PL": "Eksportuj raport PDF", "EN": "Export PDF report", "DE": "PDF-Bericht exportieren"},
    "Eksportuj raport JSON": {"PL": "Eksportuj raport JSON", "EN": "Export JSON report", "DE": "JSON-Bericht exportieren"},
    "Wprowad콬 dwie analizy do por칩wnania": {
        "PL": "Wprowad콬 dwie analizy do por칩wnania",
        "EN": "Select two analyses to compare",
        "DE": "W칛hlen Sie zwei Analysen zum Vergleich"
    },
    "Por칩wnanie wynik칩w:": {"PL": "Por칩wnanie wynik칩w:", "EN": "Comparison of results:", "DE": "Ergebnisvergleich:"},
    "Brak analiz do por칩wnania.": {"PL": "Brak analiz do por칩wnania.", "EN": "No analyses to compare.", "DE": "Keine Analysen zum Vergleichen."},
    "Wyloguj": {"PL": "Wyloguj", "EN": "Logout", "DE": "Ausloggen"},
    "B켹캧dny login lub has켹o.": {"PL": "B켹캧dny login lub has켹o.", "EN": "Incorrect login or password.", "DE": "Falscher Login oder Passwort."},
    "U콮ytkownik ju콮 istnieje.": {"PL": "U콮ytkownik ju콮 istnieje.", "EN": "User already exists.", "DE": "Benutzer existiert bereits."},
    "Rejestracja zako켻czona sukcesem. Mo콮esz si캧 zalogowa캖.": {
        "PL": "Rejestracja zako켻czona sukcesem. Mo콮esz si캧 zalogowa캖.",
        "EN": "Registration successful. You can log in now.",
        "DE": "Registrierung erfolgreich. Sie k칬nnen sich jetzt anmelden."
    }
}

lang_options = {"PL": "Polski", "EN": "English", "DE": "Deutsch"}
selected_lang = st.sidebar.selectbox("游깷 " + translations["Wybierz j캧zyk / Select Language / Sprache w칛hlen"][session_state.language],
                                    list(lang_options.keys()), format_func=lambda x: lang_options[x])
session_state.language = selected_lang

# Styl nowoczesny z gradientem
st.markdown("""
    <style>
        .stApp {
            background: linear-gradient(to right, #2c3e50, #3498db);
            font-family: 'Segoe UI', sans-serif;
        }
        html, body, [class*="css"] {
            background-color: transparent !important;
            color: #ffffff !important;
        }
        h1, h2, h3, h4, h5, h6, p, div, span, label {
            color: #ffffff !important;
        }
        .top-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
        }
        ul {
            list-style-type: disc;
            padding-left: 2rem;
        }
    </style>
""", unsafe_allow_html=True)

if not session_state.logged_in:
    st.sidebar.subheader(translations["Logowanie / Rejestracja"][session_state.language])
    choice = st.sidebar.radio("", [translations["Zaloguj si캧"][session_state.language], translations["Zarejestruj si캧"][session_state.language]])

    username = st.sidebar.text_input(translations["Login"][session_state.language])
    password = st.sidebar.text_input(translations["Has켹o"][session_state.language], type="password")

    if choice == translations["Zarejestruj si캧"][session_state.language]:
        if st.sidebar.button(translations["Zarejestruj si캧"][session_state.language]):
            if username in users:
                st.sidebar.warning(translations["U콮ytkownik ju콮 istnieje."][session_state.language])
            else:
                users[username] = hash_password(password)
                save_users(users)
                st.sidebar.success(translations["Rejestracja zako켻czona sukcesem. Mo콮esz si캧 zalogowa캖."][session_state.language])
    else:
        if st.sidebar.button(translations["Zaloguj si캧"][session_state.language]):
            if username in users and users[username] == hash_password(password):
                session_state.logged_in = True
                session_state.username = username
                st.experimental_rerun()
            else:
                st.sidebar.error(translations["B켹캧dny login lub has켹o."][session_state.language])
else:
    st.sidebar.write(f"{translations['Witaj'][session_state.language] if 'Witaj' in translations else 'Witaj'}, {session_state.username}")
    if st.sidebar.button(translations["Wyloguj"][session_state.language]):
        session_state.logged_in = False
        session_state.username = ""
        st.experimental_rerun()

    menu = [translations["Strona G켹칩wna"][session_state.language],
            translations["Analiza Umowy"][session_state.language],
            translations["Ryzyka"][session_state.language],
            translations["Moje Analizy"][session_state.language]]
    choice = st.sidebar.radio(translations["Wybierz opcj캧"][session_state.language], menu)

    if choice == translations["Strona G켹칩wna"][session_state.language]:
        st.markdown(f"# {translations['Tw칩j osobisty asystent do analizy um칩w i wykrywania ryzyk'][session_state.language]}")
        st.markdown("## " + translations["Co potrafi aplikacja:"][session_state.language])
        st.markdown(f"""
        - {translations['Analiza tekstu umowy lub pliku PDF'][session_state.language]}
        - {translations['Ocena ryzyka w umowie'][session_state.language]}
        - {translations['Podsumowanie kluczowych punkt칩w'][session_state.language]}
        - {translations['Zarz캔dzanie histori캔 analiz'][session_state.language]}
        - {translations['T켹umaczenie interfejsu na 3 j캧zyki'][session_state.language]}
        """)
    elif choice == translations["Analiza Umowy"][session_state.language]:
        st.header(translations["Analiza Umowy"][session_state.language])
        method = st.radio(translations["Metoda:"][session_state.language], [translations["Prze콑lij plik PDF"][session_state.language], translations["Wklej tre콑캖 umowy tutaj"][session_state.language]])
        
        contract_text = ""
        if method == translations["Prze콑lij plik PDF"][session_state.language]:
            uploaded_file = st.file_uploader(translations["Prze콑lij plik PDF"][session_state.language], type=["pdf"])
            if uploaded_file is not None:
                pdf = PdfReader(uploaded_file)
                contract_text = ""
                for page in pdf.pages:
                    contract_text += page.extract_text()
        else:
            contract_text = st.text_area(translations["Wklej tre콑캖 umowy tutaj"][session_state.language], height=300)
        
        if st.button(translations["Analizuj umow캧"][session_state.language]):
            if contract_text.strip() == "":
                st.warning(translations["Wprowad콬 lub za켹aduj tekst umowy."][session_state.language])
            else:
                # Prosta analiza: zliczanie wyst캔pie켻 s켹칩w kluczowych ryzyka
                keywords = ["kara", "odszkodowanie", "odpowiedzialno콑캖", "karencja", "wyga콑ni캧cie", "zw켹oka"]
                found = {k: len(re.findall(k, contract_text, re.IGNORECASE)) for k in keywords}
                summary = f"{translations['Podsumowanie analizy'][session_state.language]}:\n"
                for k, v in found.items():
                    summary += f"- {translations['Ryzyko'][session_state.language]} '{k}': {v}\n"

                # Zapis analizy do bazy
                cursor.execute("INSERT INTO analiza (user, tekst, podsumowanie, score, timestamp) VALUES (?, ?, ?, ?, ?)",
                               (session_state.username, contract_text, summary, sum(found.values()), datetime.now().isoformat()))
                conn.commit()
                st.success(translations["Analiza zapisana."][session_state.language])
                st.text_area(translations["Podsumowanie:"][session_state.language], summary, height=200)

                # Eksport PDF i JSON
                if st.button(translations["Eksportuj raport PDF"][session_state.language]):
                    buffer = io.BytesIO()
                    p = canvas.Canvas(buffer)
                    p.drawString(100, 800, "Raport analizy umowy")
                    p.drawString(100, 780, summary)
                    p.save()
                    buffer.seek(0)
                    st.download_button(label="PDF", data=buffer, file_name="raport.pdf", mime="application/pdf")
                
                if st.button(translations["Eksportuj raport JSON"][session_state.language]):
                    report_json = json.dumps({"contract_text": contract_text, "summary": summary}, ensure_ascii=False, indent=2)
                    st.download_button(label="JSON", data=report_json, file_name="raport.json", mime="application/json")

    elif choice == translations["Ryzyka"][session_state.language]:
        st.header(translations["Ryzyka"][session_state.language])
        # Tutaj mo콮na doda캖 wykres ryzyk itd.

    elif choice == translations["Moje Analizy"][session_state.language]:
        st.header(translations["Moje Analizy"][session_state.language])
        cursor.execute("SELECT id, timestamp, score FROM analiza WHERE user = ?", (session_state.username,))
        rows = cursor.fetchall()
        if not rows:
            st.info(translations["Brak zapisanych analiz."][session_state.language])
        else:
            for r in rows:
                st.write(f"{translations['Analiza z dnia'][session_state.language]} {r[1]} - {translations['Ryzyko'][session_state.language]}: {r[2]}")
                if st.button(f"{translations['Usu켻 analiz캧'][session_state.language]} {r[0]}"):
                    cursor.execute("DELETE FROM analiza WHERE id = ?", (r[0],))
                    conn.commit()
                    st.experimental_rerun()

